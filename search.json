[
  {
    "objectID": "Playground.html",
    "href": "Playground.html",
    "title": "visualcve",
    "section": "",
    "text": "::: {#cell-0 .cell application/vnd.databricks.v1+cell=‘{“cellMetadata”:{“byteLimit”:2048000,“rowLimit”:10000},“inputWidgets”:{},“nuid”:“7fe478fc-4cc9-444c-a2cc-7e19d3d2e79e”,“showTitle”:false,“tableResultSettingsMap”:{},“title”:““}’ execution_count=0}\n:::\n::: {#cell-1 .cell application/vnd.databricks.v1+cell=‘{“cellMetadata”:{“byteLimit”:2048000,“rowLimit”:10000},“inputWidgets”:{},“nuid”:“39b0a771-3d0c-46db-bb75-8508b3546665”,“showTitle”:false,“tableResultSettingsMap”:{},“title”:““}’ execution_count=0}\n:::\n::: {#cell-2 .cell application/vnd.databricks.v1+cell=‘{“cellMetadata”:{“byteLimit”:2048000,“rowLimit”:10000},“inputWidgets”:{},“nuid”:“625d5383-7a07-45bd-8fc0-3c58489a4175”,“showTitle”:false,“tableResultSettingsMap”:{},“title”:““}’ execution_count=0}\n:::"
  },
  {
    "objectID": "Playground.html#break-run-everything-up-above",
    "href": "Playground.html#break-run-everything-up-above",
    "title": "visualcve",
    "section": "Break Run everything up above",
    "text": "Break Run everything up above\n::: {#cell-4 .cell application/vnd.databricks.v1+cell=‘{“cellMetadata”:{},“inputWidgets”:{},“nuid”:“366d15e9-8f91-40f2-b062-8e53ed6d8b37”,“showTitle”:false,“tableResultSettingsMap”:{},“title”:““}’ execution_count=0}\n# run all above\n:::\n::: {#cell-5 .cell application/vnd.databricks.v1+cell=‘{“cellMetadata”:{“byteLimit”:2048000,“rowLimit”:10000},“inputWidgets”:{},“nuid”:“07608387-8a83-4ef6-8219-395ec29d123b”,“showTitle”:false,“tableResultSettingsMap”:{},“title”:““}’ execution_count=0}\nprovider %&gt;% glimpse()\n:::\n::: {#cell-6 .cell application/vnd.databricks.v1+cell=‘{“cellMetadata”:{“byteLimit”:2048000,“rowLimit”:10000},“inputWidgets”:{},“nuid”:“57b64373-bc76-4f6b-a82c-a269b7bc89b4”,“showTitle”:false,“tableResultSettingsMap”:{},“title”:““}’ execution_count=0}\ncnamap %&gt;% glimpse()\n:::\n::: {#cell-7 .cell application/vnd.databricks.v1+cell=‘{“cellMetadata”:{“byteLimit”:2048000,“rowLimit”:10000},“inputWidgets”:{},“nuid”:“2b1684b5-4a77-43f9-a44c-5edd6a8354e0”,“showTitle”:false,“tableResultSettingsMap”:{},“title”:““}’ execution_count=0}\n# cutoff &lt;- now() %m-% days(90)\n# cutoff2 &lt;- now() %m-% days(180)\nlooper &lt;- seq(today(), today() %m-% years(5), by=\"-3 day\")\ntoplot &lt;- map_dfr(looper, function(curdate) {\n  before_date &lt;- curdate %m-% days(90)\n  rez &lt;- provider %&gt;% filter(state == \"PUBLISHED\") %&gt;% \n    filter(datePublished &gt;= before_date, datePublished &lt;= curdate) %&gt;% \n    count(shortName, sort=TRUE)\n  tibble(date = curdate, div = vegan::diversity(rez$n))\n})\n:::\n::: {#cell-8 .cell application/vnd.databricks.v1+cell=‘{“cellMetadata”:{“byteLimit”:2048000,“rowLimit”:10000},“inputWidgets”:{},“nuid”:“68cc6bf1-859c-4797-98c3-68cdb3556739”,“showTitle”:false,“tableResultSettingsMap”:{},“title”:““}’ execution_count=0}\nlength(looper)\n:::\n::: {#cell-9 .cell application/vnd.databricks.v1+cell=‘{“cellMetadata”:{“byteLimit”:2048000,“rowLimit”:10000},“inputWidgets”:{},“nuid”:“e69859fa-80f1-473d-b2c6-91f495abdbf6”,“showTitle”:false,“tableResultSettingsMap”:{},“title”:““}’ execution_count=0}\nggplot(toplot, aes(date, div)) +\n  geom_line()\n:::\n::: {#cell-10 .cell application/vnd.databricks.v1+cell=‘{“cellMetadata”:{“byteLimit”:2048000,“rowLimit”:10000},“inputWidgets”:{},“nuid”:“2371e916-4b13-416a-b83f-0c2d424b39ec”,“showTitle”:false,“tableResultSettingsMap”:{},“title”:““}’ execution_count=0}\n# very equal, lot of diversity\nvegan::diversity(rep(5, 50))\n:::\n::: {#cell-11 .cell application/vnd.databricks.v1+cell=‘{“cellMetadata”:{“byteLimit”:2048000,“rowLimit”:10000},“inputWidgets”:{},“nuid”:“a960857a-19db-45a8-961d-0ef143e629c7”,“showTitle”:false,“tableResultSettingsMap”:{},“title”:““}’ execution_count=0}\n# a few folks dominating\nx &lt;- seq(300)\nstupid &lt;- round(exp(sample(x, 50)), 0)\nstupid\nvegan::diversity(stupid)\n:::\n::: {#cell-12 .cell application/vnd.databricks.v1+cell=‘{“cellMetadata”:{“byteLimit”:2048000,“rowLimit”:10000},“inputWidgets”:{},“nuid”:“6f2a1e15-a99c-4bb3-b774-6a827ef45e35”,“showTitle”:false,“tableResultSettingsMap”:{},“title”:““}’ execution_count=0}\ncutoff0 &lt;- now()\ncutoff &lt;- now() %m-% days(90)\ncutoff2 &lt;- now() %m-% days(180)\none &lt;- provider %&gt;% filter(state == \"PUBLISHED\") %&gt;% \n  filter(datePublished &gt;= cutoff, datePublished &lt;= cutoff0) %&gt;% \n  summarize(x = n_distinct(shortName), cve = n_distinct(cve))\ntwo &lt;- provider %&gt;% filter(state == \"PUBLISHED\") %&gt;% \n  filter(datePublished &gt;= cutoff2, datePublished &lt;= cutoff) %&gt;% \n  summarize(x = n_distinct(shortName), cve = n_distinct(cve))\n\ncna_change &lt;- (one$x - two$x) / two$x\n\ncve_change &lt;- (one$cve - two$cve) / two$cve\ncat(\"cna change:\", percent(cna_change, 0.1), \"cve change:\", percent(cve_change, 0.1))\n:::\n::: {#cell-13 .cell application/vnd.databricks.v1+cell=‘{“cellMetadata”:{“byteLimit”:2048000,“rowLimit”:10000},“inputWidgets”:{},“nuid”:“f149e65f-f253-43d7-9014-afb7f1aefc72”,“showTitle”:false,“tableResultSettingsMap”:{},“title”:““}’ execution_count=0}\ncvefiles %&gt;% select(category) %&gt;% arrange(category) %&gt;% print(n=100)\n:::\n::: {#cell-14 .cell application/vnd.databricks.v1+cell=‘{“cellMetadata”:{“byteLimit”:2048000,“rowLimit”:10000},“inputWidgets”:{},“nuid”:“26f2b833-496f-49f7-8c20-3b4ceaa46674”,“showTitle”:false,“tableResultSettingsMap”:{},“title”:““}’ execution_count=0}\ncwe &lt;- read_parquet(cvefiles$src[cvefiles$category == \"containers_cna_problemTypes_descriptions\"]) %&gt;% \n  rename(cve = `_id`) %&gt;% \n  filter(!is.na(cweId)) %&gt;% \n  filter(str_detect(cweId, \"CWE-\\\\d+\")) %&gt;% \n  distinct(cve) %&gt;% \n  mutate(cwe = TRUE)\n\ncwe\n:::\n::: {#cell-15 .cell application/vnd.databricks.v1+cell=‘{“cellMetadata”:{“byteLimit”:2048000,“rowLimit”:10000},“inputWidgets”:{},“nuid”:“63d2b849-f5e9-4aa2-bbdd-e88d3e1d4aac”,“showTitle”:false,“tableResultSettingsMap”:{},“title”:““}’ execution_count=0}\nallcvss &lt;- cvefiles %&gt;% filter(str_detect(category, \"containers_cna_metrics_cvss\"))\n\ncvss0 &lt;- map_dfr(allcvss$src, function(x) {\n  read_parquet(x) %&gt;%   \n    rename(cve = `_id`) %&gt;% \n    select(cve, version)\n}) %&gt;%\n  mutate(version = paste0(\"cvss\", version)) %&gt;% \n  mutate(x = TRUE) %&gt;% \n  distinct()\n\ncvss &lt;- cvss0 %&gt;% \n  bind_rows(cvss0 %&gt;% distinct(cve) %&gt;% mutate(version = \"cvss\", x = TRUE)) %&gt;% \n  spread(version, x, fill=FALSE) \ncvss\n:::\n::: {#cell-16 .cell application/vnd.databricks.v1+cell=‘{“cellMetadata”:{“byteLimit”:2048000,“rowLimit”:10000},“inputWidgets”:{},“nuid”:“df0d5f95-60e1-4666-9ee6-4ec24be54614”,“showTitle”:false,“tableResultSettingsMap”:{},“title”:““}’ execution_count=0}\n# 18 containers_cna_affected                                          \n# 19 containers_cna_affected_cpe                                      \n# 20 containers_cna_affected_cpeApplicability_nodes                   \n# 21 containers_cna_affected_cpeApplicability_nodes_cpeMatch          \n# 22 containers_cna_affected_cpes                                     \n# 23 containers_cna_affected_modules                                  \n# 24 containers_cna_affected_platforms                                \n# 25 containers_cna_affected_programFiles                             \n# 26 containers_cna_affected_programRoutines                          \n# 27 containers_cna_affected_versions                                 \n# 28 containers_cna_affected_versions_changes                         \n\ncpe &lt;- read_parquet(cvefiles$src[cvefiles$category == \"containers_cna_affected_cpe\"]) %&gt;% \n  rename(cve = `_id`) %&gt;% \n  filter(str_detect(cpe, 'cpe:2\\\\.3:[aho\\\\*\\\\-](:(((\\\\?*|\\\\*?)([a-zA-Z0-9\\\\-\\\\._]|(\\\\\\\\[\\\\\\\\\\\\*\\\\?!\"#\\\\$%&\\'\\\\(\\\\)\\\\+,/:;&lt;=&gt;@\\\\[\\\\]\\\\^`\\\\{\\\\|}~]))+(\\\\?*|\\\\*?))|[\\\\*\\\\-])){5}(:(([a-zA-Z]{2,3}(-([a-zA-Z]{2}|[0-9]{3}))?)|[\\\\*\\\\-]))(:(((\\\\?*|\\\\*?)([a-zA-Z0-9\\\\-\\\\._]|(\\\\\\\\[\\\\\\\\\\\\*\\\\?!\"#\\\\$%&\\'\\\\(\\\\)\\\\+,/:;&lt;=&gt;@\\\\[\\\\]\\\\^`\\\\{\\\\|}~]))+(\\\\?*|\\\\*?))|[\\\\*\\\\-])){4}')) %&gt;% \n  distinct(cve) %&gt;% \n  mutate(cpe1 = TRUE)\ncpes &lt;- read_parquet(cvefiles$src[cvefiles$category == \"containers_cna_affected_cpes\"]) %&gt;% \n  rename(cve = `_id`) %&gt;% \n  filter(str_detect(cpes, 'cpe:2\\\\.3:[aho\\\\*\\\\-](:(((\\\\?*|\\\\*?)([a-zA-Z0-9\\\\-\\\\._]|(\\\\\\\\[\\\\\\\\\\\\*\\\\?!\"#\\\\$%&\\'\\\\(\\\\)\\\\+,/:;&lt;=&gt;@\\\\[\\\\]\\\\^`\\\\{\\\\|}~]))+(\\\\?*|\\\\*?))|[\\\\*\\\\-])){5}(:(([a-zA-Z]{2,3}(-([a-zA-Z]{2}|[0-9]{3}))?)|[\\\\*\\\\-]))(:(((\\\\?*|\\\\*?)([a-zA-Z0-9\\\\-\\\\._]|(\\\\\\\\[\\\\\\\\\\\\*\\\\?!\"#\\\\$%&\\'\\\\(\\\\)\\\\+,/:;&lt;=&gt;@\\\\[\\\\]\\\\^`\\\\{\\\\|}~]))+(\\\\?*|\\\\*?))|[\\\\*\\\\-])){4}')) %&gt;% \n  distinct(cve) %&gt;% \n  mutate(cpes = TRUE)\n\ncpe2 &lt;- read_parquet(cvefiles$src[cvefiles$category == \"containers_cna_affected_cpeApplicability_nodes\"]) %&gt;% \n  rename(cve = `_id`)\ncpe3 &lt;- read_parquet(cvefiles$src[cvefiles$category == \"containers_cna_affected_cpeApplicability_nodes_cpeMatch\"]) %&gt;% \n  rename(cve = `_id`) %&gt;% \n  right_join(cpe2, by=c(\"cve\", \"affected_id\", \"cpeApplicability_id\", \"nodes_id\")) %&gt;% \n  filter(str_detect(criteria, 'cpe:2\\\\.3:[aho\\\\*\\\\-](:(((\\\\?*|\\\\*?)([a-zA-Z0-9\\\\-\\\\._]|(\\\\\\\\[\\\\\\\\\\\\*\\\\?!\"#\\\\$%&\\'\\\\(\\\\)\\\\+,/:;&lt;=&gt;@\\\\[\\\\]\\\\^`\\\\{\\\\|}~]))+(\\\\?*|\\\\*?))|[\\\\*\\\\-])){5}(:(([a-zA-Z]{2,3}(-([a-zA-Z]{2}|[0-9]{3}))?)|[\\\\*\\\\-]))(:(((\\\\?*|\\\\*?)([a-zA-Z0-9\\\\-\\\\._]|(\\\\\\\\[\\\\\\\\\\\\*\\\\?!\"#\\\\$%&\\'\\\\(\\\\)\\\\+,/:;&lt;=&gt;@\\\\[\\\\]\\\\^`\\\\{\\\\|}~]))+(\\\\?*|\\\\*?))|[\\\\*\\\\-])){4}')) %&gt;% \n  distinct(cve) %&gt;% \n  mutate(cpe2 = TRUE)\n\n# affected \nempty_version &lt;- c(\"n/a\", \"unspecified\", \"0\")\nempty_lessthan &lt;- c(\"*\", \"None\", \"latest\")\nversions &lt;- read_parquet(cvefiles$src[cvefiles$category == \"containers_cna_affected_versions\"]) %&gt;% \n  rename(cve = `_id`) %&gt;% \n  mutate(version = ifelse(tolower(version) %in% empty_version, NA_character_, version)) %&gt;% \n  mutate(lessThanOrEqual = ifelse(tolower(lessThanOrEqual) %in% empty_lessthan, NA_character_, lessThanOrEqual)) %&gt;%\n  filter(!(is.na(version) & is.na(lessThanOrEqual))) %&gt;% \n  distinct(cve) %&gt;% \n  mutate(version = TRUE)\n\naffected0 &lt;- read_parquet(cvefiles$src[cvefiles$category == \"containers_cna_affected\"]) %&gt;% \n  rename(cve = `_id`) %&gt;% \n  mutate(product = ifelse(tolower(product) %in% c(\"n/a\", \"unknown\", \"notfound\"), \n                          NA_character_, product)) %&gt;% \n  mutate(vendor = ifelse(tolower(vendor) %in% c(\"n/a\", \"unknown\", \"notfound\"), \n                         NA_character_, vendor)) %&gt;%\n  pivot_longer(cols=-c(\"affected_id\", \"cve\"), names_to = \"cat\", values_to = \"val\") %&gt;%\n  filter(!is.na(val)) %&gt;%\n  summarize(.by=cve, pv = all(c(\"product\", \"vendor\") %in% cat),\n            other = any(c(\"packageName\", \"collectionURL\", \"repo\") %in% cat)) %&gt;% \n  full_join(versions, by=\"cve\") %&gt;% \n  replace_na(list(pv = FALSE, other = FALSE, version = FALSE)) %&gt;% \n  mutate(vpv = pv & version) %&gt;% \n  select(cve, vpv, purl_repo=other)\n\nallcpe &lt;- cpe %&gt;% \n  full_join(cpes, by=\"cve\") %&gt;% \n  full_join(cpe3, by=\"cve\") %&gt;% \n  replace_na(list(cpe1 = FALSE, cpe2 = FALSE, cpes = FALSE)) %&gt;% \n  mutate(cpe = cpe1 | cpe2 | cpes) %&gt;% \n  select(cve, cpe)\n\n\naffected &lt;- affected0 %&gt;% \n  full_join(allcpe, by=\"cve\") %&gt;% \n  replace_na(list(vpv = FALSE, purl_repo = FALSE, cpe = FALSE)) %&gt;% \n  mutate(any_version = vpv | purl_repo | cpe)\n\naffected\n\n:::\n::: {#cell-17 .cell application/vnd.databricks.v1+cell=‘{“cellMetadata”:{“byteLimit”:2048000,“rowLimit”:10000},“inputWidgets”:{},“nuid”:“a6e26f0f-2ff4-4ea7-9094-15b50c3ce6d8”,“showTitle”:false,“tableResultSettingsMap”:{},“title”:““}’ execution_count=0}\nallflags &lt;- affected %&gt;% \n  full_join(cvss, by=\"cve\") %&gt;% \n  full_join(cwe, by=\"cve\") %&gt;% \n  full_join(cnamap, by=\"cve\") %&gt;% \n  replace_na(list(vpv = FALSE, purl_repo = FALSE, cpe = FALSE, any_version = FALSE,\n                  cvss = FALSE, cvss2.0 = FALSE, cvss3.0 = FALSE, cvss3.1 = FALSE, \n                  cvss4.0 = FALSE, cwe = FALSE)) %&gt;% \n  select(cve, date = datePublished, cna=shortName, product=any_version, cvss, cwe) %&gt;% \n  mutate(complete = product & cvss & cwe)\n\nlooper &lt;- seq(today(), today() %m-% years(5), by=\"-3 day\")\ntoplot &lt;- map_dfr(looper, function(curdate) {\n  before_date &lt;- curdate %m-% days(90)\n  rez0 &lt;- allflags %&gt;% \n    filter(date &gt;= before_date, date &lt;= curdate) %&gt;% \n    select(-date)\n\n  rez &lt;- rez0 %&gt;% \n    select(-cna) %&gt;% \n    gather(cat, val, -cve) %&gt;% \n    summarize(.by=cat, x = sum(val), n = n(), pct = x/n, date = curdate, grp=\"With MITRE\") %&gt;% \n    bind_rows(rez0 %&gt;% filter(cna != \"mitre\") %&gt;% select(-cna) %&gt;% \n                gather(cat, val, -cve) %&gt;%\n                summarize(.by=cat, x = sum(val), n = n(), pct = x/n, date = curdate, grp=\"Without MITRE\"))\n  rez\n}) %&gt;% \n  mutate(cat = case_when(cat == \"product\" ~ \"Product Identified\",\n                         cat == \"cvss\" ~ \"CVSS (any version)\",\n                         cat == \"cwe\" ~ \"CWE\",\n                         cat == \"complete\" ~ \"Complete (Prod+CVSS+CWE)\")) %&gt;% \n  mutate(cat = factor(cat, levels=c(\"Complete (Prod+CVSS+CWE)\", \"CWE\", \"CVSS (any version)\", \"Product Identified\"), ordered=TRUE)) %&gt;% \n  filter(grp == \"Without MITRE\")\n\nlbls &lt;- toplot %&gt;% filter(date == max(date))\n\n# ggplot(toplot, aes(date, pct, label=percent(pct, 0.1))) +\n#   facet_wrap(~cat, ncol=1) +\n#   geom_text_repel(data=lbls, size=8/.pt) +\n#   geom_line(color=tab(\"blue\")) +\n#   scale_y_continuous(expand=expansion(mult=c(0,0.04)), limits=c(0,1), label=label_percent(1)) +\n#   scale_x_date(expand=expansion(mult=c(0,0.04))) +\n#   theme(strip.background = element_rect(fill=\"#E9F1E8\"))\n:::\n::: {#cell-18 .cell application/vnd.databricks.v1+cell=‘{“cellMetadata”:{“byteLimit”:2048000,“rowLimit”:10000},“inputWidgets”:{},“nuid”:“95dd92b1-00b1-44c9-a910-81a3e8dda829”,“showTitle”:false,“tableResultSettingsMap”:{},“title”:““}’ execution_count=0}\ntoplot\n:::\n::: {#cell-19 .cell application/vnd.databricks.v1+cell=‘{“cellMetadata”:{“byteLimit”:2048000,“rowLimit”:10000},“inputWidgets”:{},“nuid”:“0a3d014c-5482-476d-8d75-d795ae4e6b86”,“showTitle”:false,“tableResultSettingsMap”:{},“title”:““}’ execution_count=0}\noptions(repr.plot.width=800, repr.plot.height=400)\n\ntab\n:::\n::: {#cell-20 .cell application/vnd.databricks.v1+cell=‘{“cellMetadata”:{“byteLimit”:2048000,“rowLimit”:10000},“inputWidgets”:{},“nuid”:“26be1ed6-03e6-4864-9e1f-696060eb2462”,“showTitle”:false,“tableResultSettingsMap”:{},“title”:““}’ execution_count=0}\n\nggplot(toplot, aes(date, pct, label=percent(pct, 0.1))) +\n  facet_wrap(~cat, nrow=1) +\n  # geom_vline(xintercept=min(toplot$date), linewith=0.25, color=\"gray30\") +\n  geom_hline(yintercept=0, linewidth=0.25, color=\"gray30\") +\n  geom_point(color=tab(\"seablue\"), size=0.25) +\n  geom_text_repel(data=lbls, size=8/.pt) +\n  scale_y_continuous(\"Percent of CVEs Published\", breaks=seq(0,1,0.2), \n    expand=expansion(mult=c(0,0.04)), limits=c(0,1), label=label_percent(1)) +\n  scale_x_date(\"Sliding 90 day window of CVE Publications\", expand=expansion(mult=c(0,0.04)),\n              date_breaks=\"1 year\", date_labels=\"'%y\") +\n  theme(strip.background = element_rect(fill=\"#dae3f2\", color=NA),\n        panel.grid.major = element_line(color=\"gray94\", linewidth=0.25))\n:::\n::: {#cell-21 .cell application/vnd.databricks.v1+cell=‘{“cellMetadata”:{“byteLimit”:2048000,“rowLimit”:10000},“inputWidgets”:{},“nuid”:“0b178a5e-223d-4b3c-9a14-2d7e2e450293”,“showTitle”:false,“tableResultSettingsMap”:{},“title”:““}’ execution_count=0}\npaste(colnames(cvss), collapse = \" = FALSE, \")\n\n\n:::\n::: {#cell-22 .cell application/vnd.databricks.v1+cell=‘{“cellMetadata”:{“byteLimit”:2048000,“rowLimit”:10000},“inputWidgets”:{},“nuid”:“4e7e9758-4f08-41a6-bc7a-0cac5b46c298”,“showTitle”:false,“tableResultSettingsMap”:{},“title”:““}’ execution_count=0}\ncpes &lt;- read_parquet(cvefiles$src[cvefiles$category == \"containers_cna_affected_cpes\"]) %&gt;% \n  rename(cve = `_id`) %&gt;% \n  filter(str_detect(cpes, 'cpe:2\\\\.3:[aho\\\\*\\\\-](:(((\\\\?*|\\\\*?)([a-zA-Z0-9\\\\-\\\\._]|(\\\\\\\\[\\\\\\\\\\\\*\\\\?!\"#\\\\$%&\\'\\\\(\\\\)\\\\+,/:;&lt;=&gt;@\\\\[\\\\]\\\\^`\\\\{\\\\|}~]))+(\\\\?*|\\\\*?))|[\\\\*\\\\-])){5}(:(([a-zA-Z]{2,3}(-([a-zA-Z]{2}|[0-9]{3}))?)|[\\\\*\\\\-]))(:(((\\\\?*|\\\\*?)([a-zA-Z0-9\\\\-\\\\._]|(\\\\\\\\[\\\\\\\\\\\\*\\\\?!\"#\\\\$%&\\'\\\\(\\\\)\\\\+,/:;&lt;=&gt;@\\\\[\\\\]\\\\^`\\\\{\\\\|}~]))+(\\\\?*|\\\\*?))|[\\\\*\\\\-])){4}')) %&gt;% \n  distinct(cve) %&gt;% \n  mutate(cpes = TRUE)\ncpes\n:::\n::: {#cell-24 .cell application/vnd.databricks.v1+cell=‘{“cellMetadata”:{“byteLimit”:2048000,“rowLimit”:10000},“inputWidgets”:{},“nuid”:“e2010bca-f94c-496d-9c39-fb7f881e13ea”,“showTitle”:false,“tableResultSettingsMap”:{},“title”:““}’ execution_count=0}\nempty_version &lt;- c(\"n/a\", \"unspecified\", \"0\")\nempty_lessthan &lt;- c(\"*\", \"None\", \"latest\")\nversions &lt;- read_parquet(cvefiles$src[cvefiles$category == \"containers_cna_affected_versions\"]) %&gt;% \n  rename(cve = `_id`) %&gt;% \n  mutate(version = ifelse(tolower(version) %in% empty_version, NA_character_, version)) %&gt;% \n  mutate(lessThanOrEqual = ifelse(tolower(lessThanOrEqual) %in% empty_lessthan, NA_character_, lessThanOrEqual)) %&gt;%\n  filter(!(is.na(version) & is.na(lessThanOrEqual))) %&gt;% \n  distinct(cve) %&gt;% \n  mutate(version = TRUE)\n\naffected &lt;- read_parquet(cvefiles$src[cvefiles$category == \"containers_cna_affected\"]) %&gt;% \n  rename(cve = `_id`) %&gt;% \n  mutate(product = ifelse(tolower(product) %in% c(\"n/a\", \"unknown\", \"notfound\"), \n                          NA_character_, product)) %&gt;% \n  mutate(vendor = ifelse(tolower(vendor) %in% c(\"n/a\", \"unknown\", \"notfound\"), \n                         NA_character_, vendor)) %&gt;%\n  pivot_longer(cols=-c(\"affected_id\", \"cve\"), names_to = \"cat\", values_to = \"val\") %&gt;%\n  filter(!is.na(val)) %&gt;%\n  summarize(.by=cve, pv = all(c(\"product\", \"vendor\") %in% cat),\n            other = any(c(\"packageName\", \"collectionURL\", \"repo\") %in% cat)) %&gt;% \n  full_join(versions, by=\"cve\") %&gt;% \n  replace_na(list(pv = FALSE, other = FALSE, version = FALSE)) %&gt;% \n  mutate(vpv = pv & version) %&gt;% \n  select(cve, vpv, purl_repo=other)\n\naffected\n:::"
  },
  {
    "objectID": "installation.html",
    "href": "installation.html",
    "title": "visualcve",
    "section": "",
    "text": "::: {#cell-0 .cell application/vnd.databricks.v1+cell=‘{“cellMetadata”:{“byteLimit”:2048000,“rowLimit”:10000},“inputWidgets”:{},“nuid”:“0fd339c0-9f91-49ac-a7b8-38377dd2e50e”,“showTitle”:false,“tableResultSettingsMap”:{},“title”:““}’ execution_count=0}\n %sh sudo dpkg -i /Volumes/empiricalsecurity_dev/datascience_dev/ds_volume/cache/quarto-1.6.43-linux-arm64.deb\n:::\n::: {#cell-1 .cell application/vnd.databricks.v1+cell=‘{“cellMetadata”:{“byteLimit”:2048000,“rowLimit”:10000},“inputWidgets”:{},“nuid”:“6c1dc2d3-bb3d-4904-b35a-46e59785b63b”,“showTitle”:false,“tableResultSettingsMap”:{},“title”:““}’ execution_count=0}\nload_if &lt;- function(x) {\n  if (!requireNamespace(x, quietly = TRUE)) {\n    install.packages(x)\n  }\n}\ngetpkg &lt;- function(x) {\n  load_if(x)\n  suppressPackageStartupMessages({\n    suppressWarnings({\n      library(x, character.only=TRUE)\n\n    })\n  })\n}\n\nlibrary(rmarkdown)\nlibrary(knitr)\nlibrary(tidyverse)\ngetpkg(\"quarto\")\ngetpkg(\"rvest\")\ngetpkg(\"log4r\")\ngetpkg(\"jsonlite\")\ngetpkg(\"httr\")\ngetpkg(\"ggrepel\")\ngetpkg(\"patchwork\")\ngetpkg(\"here\") #\ngetpkg(\"pandoc\") #\nif(length(pandoc_installed_versions()) == 0) {\n  pandoc_install()\n}\npandoc_activate(pandoc_installed_latest())\n\n:::\n::: {#cell-2 .cell application/vnd.databricks.v1+cell=‘{“cellMetadata”:{“byteLimit”:2048000,“rowLimit”:10000},“inputWidgets”:{},“nuid”:“86ac33d1-d4f1-4353-936f-d8a4d38e53c4”,“showTitle”:false,“tableResultSettingsMap”:{},“title”:““}’ execution_count=0}\nquarto_render()\n:::\n\u001b[91mERROR: TypeError: Invalid argument (os error 22): remove ‘/Workspace/Repos/.internal/b216b2f4b0_commits/9c00be66e3b8a17c7fd2db0135db5fca02f16385/docs’\nStack trace:  at Object.removeSync (ext:deno_fs/30_fs.js:250:3)  at safeRemoveSync (file:///opt/quarto/bin/quarto.js:2303:14)  at removeIfExists (file:///opt/quarto/bin/quarto.js:4867:9) at renderProject (file:///opt/quarto/bin/quarto.js:85948:17) at eventLoopTick (ext:core/01_core.js:175:7)  at async Command.actionHandler (file:///opt/quarto/bin/quarto.js:90653:32)  at async Command.execute (file:///opt/quarto/bin/quarto.js:8111:13)  at async Command.parseCommand (file:///opt/quarto/bin/quarto.js:8001:20)  at async quarto (file:///opt/quarto/bin/quarto.js:126631:9)  at async file:///opt/quarto/bin/quarto.js:126658:9\u001b[39m\n::: {#cell-4 .cell application/vnd.databricks.v1+cell=‘{“cellMetadata”:{“byteLimit”:2048000,“rowLimit”:10000},“inputWidgets”:{},“nuid”:“45bbdd4c-a45c-41aa-935b-f381c1e04c10”,“showTitle”:false,“tableResultSettingsMap”:{},“title”:““}’ execution_count=0}\n# some old github functions:\n\n# sleep is one of:  T/F for always sleeping or not, or an integer, for \"sleep under these remaining\"\nratelimit &lt;- function(header) {\n  tibble(limit = as.numeric(header$`x-ratelimit-limit`),\n         remaining = as.numeric(header$`x-ratelimit-remaining`), \n         reset = as.numeric(header$`x-ratelimit-reset`)) %&gt;%\n    mutate(now = parse_date_time(header$date, orders = \"%a, %d %b %Y HMS\", tz=\"GMT\"),\n           reset_dt = as_datetime(reset, tz=\"UTC\")) %&gt;% \n    # mutate(reset_dt = if_else(reset_dt &lt; now, add_with_rollback(reset_dt, hours(1)), reset_dt)) %&gt;%\n    mutate(secdiff = as.numeric(difftime(reset_dt, now, units=\"secs\")))\n}\n\ngithub_api &lt;- function(path, config, sleep = Inf, logger = log4r::logger(), method=\"GET\", ...) {\n  url &lt;- modify_url(\"https://api.github.com\", path = path)\n  resp &lt;- NA\n  if(method == \"GET\") {\n    resp &lt;- httr::GET(url, config, ...)\n  } else if (method == \"PUT\") {\n    debug(logger, \"attempting a PUT request\")\n    resp &lt;- httr::PUT(url, config, ...)\n  }\n\n  expect_resp &lt;- ifelse(\"Accept\" %in% names(config$headers), as.vector(config$headers['Accept']), \"application/json\")\n  expect_resp &lt;- ifelse(expect_resp == \"application/vnd.github.cloak-preview\",\n                        \"application/json\", expect_resp)\n  if (httr::http_type(resp) != expect_resp) {\n    warn(logger, paste(\"API did not return expected response type:\", expect_resp))\n    warn(logger, paste(\"API sent back:\", httr::http_type(resp)))\n    # stop(paste(\"API did not return expected response type:\", expect_resp), call. = FALSE)\n  }\n  if(! (status_code(resp) %in% c(200, 201))) {\n    error(logger, sprintf(\"GitHub API request failed [%s] &lt;%s&gt;\", status_code(resp), url))\n    # stop(sprintf(\"GitHub API request failed [%s]\\n&lt;%s&gt;\", status_code(resp), url), call. = FALSE)\n    return(NULL)\n  }\n  parsed &lt;- httr::content(resp, \"text\")\n  if(httr::http_type(resp) == \"application/json\") {\n    parsed &lt;- jsonlite::fromJSON(httr::content(resp, \"text\", encoding = \"UTF-8\"), simplifyVector = FALSE)\n  }\n  curlimits &lt;- ratelimit(resp$headers)\n  if(curlimits$remaining &lt;= 5) {\n    sleeptime &lt;- curlimits$secdiff * 1.05 # add a buffer just to be safe when we're close to the limit\n    info(logger, paste0(\"Almost at reset, setting to remaining time:\", round(sleeptime, 3)))\n  } else {\n    sleeptime &lt;- (curlimits$secdiff / curlimits$remaining) * 0.92  # trying to be more aggressive\n  }\n  if(is.nan(sleeptime) | !is.finite(sleeptime)) sleeptime &lt;- 1\n  if(sleeptime &lt; 0) sleeptime &lt;- 0\n\n  if(sleeptime &gt; 3600) {\n    warn(logger, \"weird Inf Sleep catch triggered:\")\n    warn(logger, paste0(\"  secdiff: \", round(curlimits$secdiff, 3)))\n    warn(logger, paste0(\"  remaining: \", round(curlimits$remaining, 3)))\n    warn(logger, paste0(\"  sleeptime is.finite: \", is.finite(sleeptime)))\n    sleeptime &lt;- curlimits$secdiff * 1.05 # add 5% just to be safe on the last one\n    warn(logger, paste0(\"  sleeptime is padded secdiff: \", round(sleeptime, 3)))\n  }\n\n  sleep_logical &lt;- FALSE\n  if(is.logical(sleep)) {\n    sleep_logical &lt;- sleep\n  } else if (is.integer(sleep)) {\n    sleep_logical &lt;- curlimits$remaining &lt;= sleep\n  }\n\n\n  if(sleep_logical) {\n    debug(logger, paste0(\"  \", curlimits$limit, \"/\", curlimits$remaining, \", reset: \", curlimits$reset_dt,\n                         \", sleeptime: \", round(sleeptime, 3)))\n    Sys.sleep(sleeptime)\n  } else {\n    debug(logger, \"  not sleeping\")\n  }\n\n  structure(\n    list(\n      content = parsed,\n      path = path,\n      response = resp\n    ),\n    class = \"github_api\"\n  )\n}\n\ngh_files &lt;- function(repo, branch=\"master\", config, sleep, logger = log4r::logger()) {\n  curpath &lt;- paste0(\"/repos/\", repo, \"/branches/\", branch)\n  # cat(glue::glue(\"gh_files path: {curpath}\\n\"))\n  cur_base &lt;- list()\n  try(cur_base &lt;- github_api(curpath, config=config, sleep=sleep, logger=logger))\n  rez &lt;- tibble()                 \n  if(length(cur_base) &gt; 0) { \n      # cat(glue::glue(\"gh_files path: {curpath}\\n\"))\n\n    master_tree_sha &lt;- cur_base$content$commit$commit$tree$sha\n    curpath &lt;- paste0(\"/repos/\", repo, \"/git/trees/\", master_tree_sha)\n    try(cur_base &lt;- github_api(curpath, config=config, sleep=sleep, query=list(recursive=1), logger=logger))\n    rez &lt;- map_dfr(cur_base$content$tree, function(x) {\n      enframe(unlist(x)) %&gt;% spread(name, value)\n    })\n  } \n  rez\n} \n\ngh_commit_file &lt;- function(repo, path, msg, file, config, sleep,  logger = log4r::logger()) {\n  # https://docs.github.com/en/rest/reference/repos#create-or-update-file-contents\n  # set up repo/path to cleanly combine\n  localpath &lt;- gsub(\"^/+\", \"\", path)\n  repo &lt;- gsub(\"/$+\", \"\", repo)\n  repo &lt;- gsub(\"^/+\", \"\", repo)\n  curpath &lt;- paste0(\"/repos/\", repo, \"/contents/\", localpath)\n  # levellog(logger, \"INFO\", paste(\"file commit:\", curpath))\n      \n  rawtxt &lt;- readBin(file, \"raw\", file.info(file)[1, \"size\"])\n  levellog(logger, \"INFO\", paste(length(as.integer(rawtxt)), \"bytes,\",\n                                  \"file commit:\", localpath))\n  bodylist &lt;- list(message = msg, content = rawtxt)\n  # levellog(logger, \"INFO\", paste(\"getting existing file list\"))\n  curfiles &lt;- gh_files(repo, config=config, sleep=sleep, logger=logger)\n  cursha &lt;- curfiles %&gt;% filter(path == localpath) %&gt;% slice(1) %&gt;% pull(sha)\n  if(length(cursha) &gt; 0) {\n    # levellog(logger, \"INFO\", paste(\"attempting to overwrite existing file\"))\n    bodylist$sha = cursha\n  # } else {\n  #   levellog(logger, \"INFO\", paste(\"attempting to create new file\"))\n  }\n  body &lt;- toJSON(bodylist, raw = \"base64\", auto_unbox=TRUE)\n\n  try(cur_base &lt;- github_api(curpath, config=config, sleep=sleep, logger=logger,\n                             method=\"PUT\", body = body))\n  cur_base\n}\n\noutdir &lt;- \"/Volumes/empiricalsecurity_dev/datascience_dev/ds_volume/cache/visualcve_docs\"\nallfile &lt;- tibble(srcfile = list.files(outdir, full.names = TRUE, recursive=TRUE)) %&gt;%\n  # filter(mtime &gt;= starttime) %&gt;%  # anything modified after we started the script\n  # or just take everything in there since the notebook cleans it on start up\n  mutate(path = gsub(paste0(outdir, \"/\"), \"\", srcfile))\nlevellog(logger, \"INFO\", paste(\"Commiting\", nrow(allfile), \"files\"))\n\nallfile\n\n# Authorization: Bearer YOUR-TOKEN\" \\\nconfig &lt;- add_headers(\"Authorization\"=paste(\"Bearer\", Sys.getenv(\"GITHUB_PAT\")),\n                      \"User-Agent\"=\"empirical/updates\")\nlogger &lt;- log4r::logger()\nrepo &lt;- \"jayjacobs/visualcve\"\nfor (i in seq(nrow(allfile))) {\n  levellog(logger, \"INFO\", paste(\"  --&gt; attempting to push\", allfile$path[i]))\n  rez &lt;- gh_commit_file(repo, path = allfile$path[i], msg=paste0(\"automatic stats update: \", format(Sys.Date(), \"%Y%m%d\")),\n                        file = allfile$srcfile[i], config=config, sleep=TRUE, logger = logger)\n  if(!is.list(rez)) {\n    levellog(logger, \"INFO\", paste(\"Response for\", allfile$path[i], \"was unexpected and undefined\"))\n  } else {\n    levellog(logger, \"INFO\", paste(\"Response for\", allfile$path[i], \"was\", rez$response$status_code))\n  }\n}\n\ncat(\"All files completed.\\n\")\n# allfile %&gt;% glimpse()\n:::\n::: {#cell-5 .cell application/vnd.databricks.v1+cell=‘{“cellMetadata”:{“byteLimit”:2048000,“rowLimit”:10000},“inputWidgets”:{},“nuid”:“a4a5ef13-3409-4303-8e6f-5b9fc9ed985f”,“showTitle”:false,“tableResultSettingsMap”:{},“title”:““}’ execution_count=0}\n# load_if(\"reticulate\")\n\n# library(reticulate)\n\n# source_python(\"read_pickle.py\")\n# pickle_data &lt;- read_pickle_file(\"/Volumes/empiricalsecurity_dev/datascience_dev/ds_volume/etc/cveorg/json_parsing_state.pkl\")\n\n# names(pickle_data)\n:::"
  }
]
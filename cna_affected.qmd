---
title: "cna.affected"
output:
  html_document:
    toc: true
    toc_depth: 2
    number_sections: false
    theme: paper
    code_folding: none
    toc_float:
        collapsed: false
        smooth_scroll: false
---

```{r setup, echo=FALSE}

suppressPackageStartupMessages({
  suppressWarnings({
    library(dplyr)
    library(tibble)
    library(tidyr)
    library(readr)
    library(stringr)
    library(here)
    library(scales)
    library(log4r)
    library(lubridate)
    library(purrr)
    library(arrow)
    library(tidyjson)
    library(ggplot2)
    library(ggrepel)
    library(gt)
  })
})

mainfont <- "Source Sans Pro"
tab <- function (x = c("blue", "orange", "red", "seablue", "green", 
                       "olive", "purple", "pink", "brown", "gray")) {
  tableau <- c(blue = "#4E79A7", orange = "#F28E2B", red = "#E15759", seablue = "#76B7B2", 
               green = "#59A14F", olive = "#EDC948", purple = "#B07AA1", pink = "#FF9DA7", 
               brown = "#9C755F", gray = "#BAB0AC")
  as.vector(tableau[x])
}

theme_set(theme_minimal(base_family=mainfont) +
            theme(panel.grid = element_line(color="gray95"),
                  plot.caption = element_text(size=6, face = "italic", color="gray60"),
                  text = element_text(family=mainfont),
                  legend.title = element_blank(),
                  legend.position="bottom"))
update_geom_defaults('col', list(fill=tab('blue')))
update_geom_defaults('bar', list(fill=tab('blue')))
update_geom_defaults('text', list(family=mainfont, size=8/.pt))
update_geom_defaults('label', list(family=mainfont, size=8/.pt, label.size=NA))
# update_geom_defaults('point', list(shape=21, size=2, fill=tab('blue'), color='white'))
update_geom_defaults('point', list(size=0.5, color=tab('blue')))
update_geom_defaults('line', list(color=tab('blue'), size=0.85))

knitr::opts_chunk$set(
  cache = FALSE,
  message = FALSE,
  warning = FALSE, 
  dev = c("png", "cairo_pdf"),
  echo = FALSE,
  fig.retina = 2,
  fig.width = 8,
  fig.height = 4
)

```

```{r}

mklab <- function (x, bytes = FALSE) {
    brate <- tibble(cut = c(10^seq(3, 24, 3), Inf), suffix = c("0", 
        "K", "M", "B", "T", "q", "Q", "s", "S"))
    if (bytes) {
        brate <- tibble(cut = c(1024^seq(8), Inf), suffix = c("0", 
            "kB", "MB", "GB", "TB", "PB", "EB", "ZB", "YB"))
    }
    pickup <- tibble(x = x) %>% mutate(one = cut(x, breaks = c(-Inf, 
        brate$cut), labels = brate$suffix, right = FALSE)) %>% 
        mutate(two = x/sapply(.data$one, function(y) lag(brate$cut)[y])) %>% 
        mutate(three = ifelse(.data$two < 10, as.character(round(.data$two, 
            1)), as.character(round(.data$two, 0)))) %>% mutate(three = ifelse(is.na(.data$three), 
        as.character(round(.data$x, 0)), paste0(.data$three, 
            .data$one))) %>% mutate(four = ifelse(x < 1, x, .data$three))
    pickup$four
}

```


```{r}
varlist <- read_parquet(here("cache", "cveparse", "variables.parquet"))

expected <- c("affected" = 'array of product',
              "affected.vendor" = 'string',   # 
              "affected.product" = 'string',   #
              "affected.collectionURL" = 'uriType',   #
              "affected.repo" = 'uriType',   #
              "affected.packageName" = 'string',
              "affected.cpes" = 'array of strings',
              "affected.modules" = 'array of strings',
              "affected.programFiles" = 'array of strings',
              "affected.defaultStatus" = 'status ("affected", "unaffected", "unknown")',
              "affected.programRoutines" = 'array of objects',
              "affected.programRoutines.name" = 'string',
              "affected.platforms" = 'array of objects',
              "affected.versions" = 'array of objects',
              "affected.versions.version" = 'string',
              "affected.versions.status" = 'status ("affected", "unaffected", "unknown")',
              "affected.versions.versionType" = 'string',
              "affected.versions.lessThan" = 'string',
              "affected.versions.lessThanOrEqual" = 'string',
              "affected.versions.changes" = 'array of objects',
              "affected.versions.changes.at" = 'array of objects',
              "affected.versions.changes.status" = 'array of objects') %>% enframe(name="name", value="expected")
```

# Detailed view of Affected Products (container.cna.affected)

This view is specifically focused on `container.cna.affected`.  The table below shortened all of the variables
so the `container.cna.` portion is truncated. 

 * `JSON Field` is the compound name of the JSON data element
 * `CVEs` count of unique CVE identifiers with the `JSON Field`
 * `CVE Percent` percent of total CVEs 
 * `CNAs` count of unique CNA short names providing the `JSON Field`
 * `CNA Percent`  percent of total CVEs 
 * `JSON Type Discovered` the type of json data present in the data 
 * `JSON Schema` what the JSON schema defines the data to be, if this is not present there is no definition of the `JSON Field" in the JSON schema. 
 

```{r}
cves <- read_parquet(here("cache/cveparse/cves.parquet")) %>% 
  select(-contains(".x_"))
lastmod <- cves %>% 
  mutate(updated = as_datetime(gsub("T", " ", cveMetadata.dateUpdated))) |> 
  arrange(desc(updated)) %>% 
  slice(1) %>% 
  pull(updated)
cvepub <- cves %>% 
  select(cve, published = cveMetadata.datePublished) %>% drop_na() %>% 
  mutate(published = as.Date(str_extract(published, "\\d{4}-\\d{2}-\\d{2}")))
cvemonth <- cvepub %>% 
  mutate(month = floor_date(published, unit="month")) %>% 
  count(month)
cvecna <- cves %>% 
  select(cve, cna = cveMetadata.assignerShortName) %>% 
  drop_na()
cnacount <- cves %>% 
  select(cve, cna = cveMetadata.assignerShortName) %>% 
  drop_na() %>%
  count(cna, name="n")

affdata <- read_parquet(here("cache/cveparse/containers.cna.affected.parquet"))

cleanaff <- affdata %>%
  mutate(across(where(is.character), function(x) gsub("^n/a$", NA_character_, x))) %>%
  filter(if_any(-c(cve, affected_id), ~ !is.na(.))) %>%
  gather(cat, val, -cve, -affected_id) %>%
  drop_na() %>%
  distinct(cve, cat) %>%
  count(cat, name="cves")

aff_file <- tibble(src = list.files(here("cache", "cveparse"), pattern="^containers\\.cna\\.affected")) %>% 
  mutate(sortfield = gsub(".parquet", "", src)) %>% 
  filter(sortfield != "containers.cna.affected") %>% 
  arrange(sortfield) 

for (curfile in aff_file$src) {
  one <- read_parquet(here("cache", "cveparse", curfile))
  affdata <- affdata %>% full_join(one)
}
fdata0 <- affdata %>% 
  mutate(containers.cna.affected = "yes") %>% 
  mutate(across(where(is.character), function(x) gsub("^n/a$", NA_character_, x))) %>% 
  filter(if_any(-c(cve, affected_id), ~ !is.na(.))) %>% 
  gather(cat, val, -cve, -affected_id) %>% 
  drop_na() %>% 
  distinct(cve, cat)
fdata <- fdata0 %>% 
  count(cat, name="cves") %>%
  filter(str_detect(cat, "^containers.cna.affected")) %>% 
  mutate(name = gsub("containers.cna.", "", cat)) %>% 
  select(name, cves) %>% 
  bind_rows(affdata %>% filter(!is.na(versions_id)) %>% 
              summarize(name="affected.versions", cves=n_distinct(cve))) %>% 
  bind_rows(affdata %>% filter(!is.na(changes_id)) %>% 
              summarize(name="affected.versions.changes", cves=n_distinct(cve)))
fdata_cna <- fdata0 %>% 
  left_join(cvecna, by="cve") %>% 
  distinct(cat, cna) %>% 
  count(cat, name="cnas") %>% 
  mutate(name = gsub("containers.cna.", "", cat)) %>% 
  select(name, cnas) %>%
  mutate(name = case_when(name == "versions_id" ~ "affected.versions",
                          name == "changes_id" ~ "affected.versions.changes",
                          TRUE ~ name)) %>% 
  filter(str_detect(name, "^affected")) %>% 
  arrange(name)

toshare <- varlist %>% 
  filter(str_detect(name, "^containers.cna.affected")) %>% 
  mutate(name = gsub("containers.cna.", "", name)) %>% 
  full_join(expected, by="name") %>% 
  left_join(fdata, by="name") %>% 
  left_join(fdata_cna, by="name") %>% 
  select(name, count=n, cves, cnas, type, expected)

# CPE  Updated:  04/13/2024; 12:47:58 AM -0400

totalcve <- cves %>% distinct(cve) %>% nrow()
totalcna <- cves %>% distinct(cveMetadata.assignerShortName) %>% nrow()
gtable <- toshare %>% 
  mutate(`CVE\nPercent` = percent(cves / totalcve, 0.1),
         `CNA\nPercent` = percent(cnas / totalcna, 0.1)) %>% 
  select(`JSON Field` = name, 
         `CVEs` = cves,
         `CVE\nPercent`,
         `CNAs` = cnas,
         `CNA\nPercent`,
         # `Instances` = count,
         `JSON Type\nDiscovered` = type,
         `JSON Schema` = expected) %>% 
  replace_na(list(`JSON Schema` = " ")) 

knitr::kable(gtable, format = "html", 
             caption = paste(cves %>% distinct(cve) %>% nrow() %>% comma, 
                             "CVEs from", comma(totalcna), "CNAs as of ", 
                             as.Date(max(cves$cveMetadata.datePublished, na.rm = TRUE))))

```


```{r}
one <- affdata %>% 
  mutate(across(where(is.character), function(x) gsub("^n/a$", NA_character_, x)))

versions <- one %>% 
  select(cve, contains("versions")) %>%
  select(-containers.cna.affected.versions.status, -versions_id) |> 
  gather(cat, val, -cve) %>% 
  drop_na() %>%
  distinct(cve, cat) %>%
  distinct(cve) %>%
  mutate(containers.cna.affected.versions = "yes")

```

## Affected vendor, product, version and/or package name or repository. 

These fields represent the minimum necessary to identify the vulnerable product(s) or software. The table below identifies 
How many CVEs and CNAs have non-null values in the field. One thing to note: the "version" is represented by a JSON object 
and this code looks for anything specified in the "versions" object while ignoring the 
`containers.cna.affected.versions.status` since almost every record had that value with nothing else specified in this section. 


```{r fig.width=7, fig.height=4}
one <- affdata %>% 
  mutate(across(where(is.character), function(x) gsub("^n/a$", NA_character_, x)))

tocna <- one %>% 
  select(cve, 
         vendor = containers.cna.affected.vendor, 
         product=containers.cna.affected.product,
         repo = containers.cna.affected.repo,
         package_name = containers.cna.affected.packageName) %>% 
  left_join(versions, by="cve") %>%
  rename(version = containers.cna.affected.versions) %>% 
  mutate(across(.cols = c(-cve), function(x) ifelse(is.na(x), 0, 1))) |> 
  left_join(cvecna, by="cve") %>% 
  # mutate(one = tab("blue")) %>% 
  # spread(cat, one, fill="white") |> 
  # summarize(.by=c(cve, cna), cat = paste(sort(cat), collapse=",")) %>%
  summarize(.by=c(product, vendor, version, repo, package_name), 
            cnas = n_distinct(cna), cves=n_distinct(cve)) %>% 
  arrange(cves, cnas) %>% 
  mutate(id = row_number()) %>% 
  gather(cat, val, -id) %>% 
  mutate(filler = ifelse((cat %in% c("product", "vendor", "version", "repo", "package_name")) & (val == 1), tab("blue"), "white")) %>% 
  mutate(txt = case_when(cat %in% c("cnas", "cves") ~ comma(val),
                         val == 1 ~ "X",
                         TRUE ~ ""),
         cat = case_when(cat == "cnas" ~ "CNAs",
                         cat == "cves" ~ "CVEs",
                         TRUE ~ str_to_title(gsub("_", " ", cat)))) %>% 
  mutate(cat = factor(cat, levels=c("CVEs", "CNAs", "Vendor", "Product", 
                                    "Version", "Package Name", "Repo"), ordered=TRUE))

gg <- ggplot(tocna, aes(cat, id, fill=filler, label=txt)) +
  geom_tile(color="gray80") +
  geom_text() + 
  scale_fill_identity() + 
  scale_x_discrete(expand=c(0,0), position="top") +
  scale_y_continuous(expand=c(0,0)) +
  theme(axis.text.y = element_blank(),
        axis.title.y = element_blank(),
        axis.title.x = element_blank())
gg
```


```{r}
if(!file.exists(here("cache", "cpe_dict_2.3.parquet"))) {
  if(!file.exists(here("cache", "official-cpe-dictionary_v2.3.xml"))) {
    cpefile <- "https://nvd.nist.gov/feeds/xml/cpe/dictionary/official-cpe-dictionary_v2.3.xml.gz"
    download.file(cpefile, destfile = here("cache", basename(cpefile)))
  }
  # may take some time, but trust me, reading and parsing raw xml is easier than loading the xml object.
  cpedict <- tibble(x=read_lines(here("cache", "official-cpe-dictionary_v2.3.xml.gz"))) %>% 
    filter(str_detect(x, '<cpe-23:cpe23-item name="')) %>% 
    mutate(x = str_replace(x, "    <cpe-23:cpe23-item name=\"", ""),
           x = str_replace(x, "\"/>", "")) |> 
    separate(x, into=c("cpe", "cpe_version", "part", "vendor", "product",
                       "version", "update", "edition", "language",
                       "sw_edition", "target_sw", "target_hw", "other"),
             sep="(?<!\\\\):", extra = "merge")  |> 
    mutate(across(.cols=everything(), ~str_replace_all(.x, "\\\\", "")))
  write_parquet(cpedict, here("cache", "cpe_dict_2.3.parquet"))
} else {
  cpedict <- read_parquet(here("cache", "cpe_dict_2.3.parquet"))
}
uniq_vendor <- cpedict %>% distinct(vendor) %>% nrow() %>% comma()
uniq_vendor_product <- cpedict %>% distinct(vendor, product) %>% nrow() %>% comma()

```


## Are the vendor and product defined in the CPE dictionary? 

This grabs the CPE dictionary from [NVD](https://nvd.nist.gov/feeds/xml/cpe/dictionary/official-cpe-dictionary_v2.3.xml.gz) and will first check the value provided "as is" against the same value in the CPE dictionary. Second, it does a case-insensitive match against the defined values in the CPE. 

CPE Dict 2.3 has `r uniq_vendor` unique vendors and `r uniq_vendor_product` unique combinations of vendor and product. 

```{r}
one <- affdata %>% 
  mutate(across(where(is.character), function(x) gsub("^n/a$", NA_character_, x)))

vendor_match <- cpedict %>% distinct(vendor) %>% mutate(ven_match = TRUE)
product_match <- cpedict %>% distinct(product) %>% mutate(prod_match = TRUE)
venprod_match <- cpedict %>% distinct(vendor, product) %>% mutate(both_match = TRUE)
cpe_match <- one %>% 
  select(cve, 
         vendor = containers.cna.affected.vendor, 
         product=containers.cna.affected.product) %>%
  filter(!is.na(vendor) | !is.na(product)) %>% 
  left_join(vendor_match, by="vendor") %>% 
  left_join(product_match, by="product") %>% 
  left_join(venprod_match, by=c("vendor", "product")) %>% 
  replace_na(list(ven_match=FALSE, prod_match = FALSE, both_match = FALSE))
  

ven1 <- one %>% 
  select(cve, vendor = containers.cna.affected.vendor) |> 
  distinct(vendor) %>% 
  drop_na() %>% 
  left_join(vendor_match, by="vendor") %>% 
  replace_na(list(ven_match = FALSE)) %>% 
  count(ven_match, name="x") %>% 
  mutate(n=sum(x), pct = x/n) |> 
  filter(ven_match) %>% 
  mutate(cat = "Vendor", match = "Direct Match")

ven2 <- one %>% 
  select(cve, vendor = containers.cna.affected.vendor) |> 
  mutate(vendor = tolower(vendor)) %>% 
  distinct(vendor) %>% 
  drop_na() %>% 
  left_join(vendor_match, by="vendor") %>% 
  replace_na(list(ven_match = FALSE)) %>% 
  count(ven_match, name="x") %>% 
  mutate(n=sum(x), pct = x/n) %>% 
  filter(ven_match) %>% 
  mutate(cat = "Vendor", match = "Case Insenstive")
  

prod1 <- one %>% 
  select(cve, product=containers.cna.affected.product) |> 
  distinct(product) %>% 
  drop_na() %>% 
  left_join(product_match, by="product") %>% 
  replace_na(list(prod_match = FALSE)) %>% 
  count(prod_match, name="x") %>% 
  mutate(n=sum(x), pct = x/n) |> 
  filter(prod_match) %>% 
  mutate(cat = "Product", match = "Direct Match")

prod2 <- one %>% 
  select(cve, product=containers.cna.affected.product) |> 
  mutate(product = tolower(product)) %>% 
  distinct(product) %>% 
  drop_na() %>% 
  left_join(product_match, by="product") %>% 
  replace_na(list(prod_match = FALSE)) %>% 
  count(prod_match, name="x") %>% 
  mutate(n=sum(x), pct = x/n) |> 
  filter(prod_match) %>% 
  mutate(cat = "Product", match = "Case Insenstive")

both1 <- one %>% 
  select(cve, 
         vendor = containers.cna.affected.vendor, 
         product=containers.cna.affected.product) %>%
  # mutate(product = tolower(product)) %>% 
  distinct(vendor, product) %>% 
  drop_na() %>% 
  left_join(venprod_match, by=c("vendor", "product")) %>% 
  replace_na(list(both_match = FALSE)) %>% 
  count(both_match, name="x") %>% 
  mutate(n=sum(x), pct = x/n) |> 
  filter(both_match) %>% 
  mutate(cat = "Both", match = "Direct Match")

both2 <- one %>% 
  select(cve, 
         vendor = containers.cna.affected.vendor, 
         product=containers.cna.affected.product) %>%
  mutate(vendor = tolower(vendor), product = tolower(product)) %>%
  distinct(vendor, product) %>% 
  drop_na() %>% 
  left_join(venprod_match, by=c("vendor", "product")) %>% 
  replace_na(list(both_match = FALSE)) %>% 
  count(both_match, name="x") %>% 
  mutate(n=sum(x), pct = x/n) |> 
  filter(both_match) %>% 
  mutate(cat = "Both", match = "Case Insenstive")

toplot <- ven1 %>% 
  bind_rows(ven2) %>% 
  bind_rows(prod1) %>% 
  bind_rows(prod2) %>% 
  bind_rows(both1) %>% 
  bind_rows(both2) %>% 
  select(cat, match, x, n, pct) %>% 
  mutate(txt = paste0(comma(x), "/", comma(n), " (", percent(pct, 0.1), ")")) %>% 
  mutate(cat = factor(cat, levels=c("Vendor", "Product", "Both"), ordered=TRUE))

toplot2 <- toplot %>% 
  mutate(pct = 1)
gg <- ggplot(toplot, aes(x=pct, y=match, fill=match, label=txt)) +
  facet_wrap(~cat, ncol=1, strip.position="left", ) +
  geom_col(data=toplot2, fill="gray95") +
  geom_col() +
  geom_vline(xintercept=0, color="gray50") +
  geom_hline(yintercept=0.25, color="gray50") +
  geom_text(size=8/.pt, hjust="left", nudge_x = 0.01, family=mainfont) +
  scale_fill_manual(values=tab(c("blue", "red")), guide="none") +
  scale_x_continuous("Percent of Unique Values", expand=c(0,0), limits=c(0,1)) +
  theme(axis.text.x = element_blank(), 
        panel.grid = element_blank(),
        strip.placement = "outside",
        axis.title.y = element_blank())
# savepic(gg, here::here("figs", "cna_affected", "cpe_matching_to_CVEs"), 
#         height = 3, width = 7, open = FALSE, caption=FALSE, dpi=300)
gg
```


## When are CVEs published with vendor, product and version (VPV)?

This next plot treats a "complete" record if any of the "affected" records has a value
in the `vendor` AND `product` AND `versions`. It is not inspecting those fields for quality, 
just that something in present. Again, the `containers.cna.affected.versions.status` is being ignored. 

```{r}
toplot <- one %>% 
  select(cve, 
         vendor = containers.cna.affected.vendor, 
         product=containers.cna.affected.product) %>% 
  left_join(versions, by="cve") %>%
  rename(version = containers.cna.affected.versions) %>% 
  mutate(across(.cols = c(-cve), function(x) ifelse(is.na(x), 0, 1))) |> 
  filter(product == 1 & vendor == 1 & version == 1) %>% 
  distinct(cve) %>% 
  mutate(has_affected = "yes") %>% 
  right_join(cvepub, by="cve") %>% 
  replace_na(list(has_affected = "no")) %>% 
  mutate(month = floor_date(published, unit="month")) %>% 
  left_join(cvecna, by="cve") %>% 
  # filter(cna != "mitre") %>% 
  count(has_affected, month) %>% 
  spread(has_affected, n, fill = 0) %>% 
  mutate(total = no + yes) %>% 
  # select(cna, x=yes, n=total) %>% 
  mutate(pct = yes / total) %>% 
  mutate(colfill = ifelse(pct > 0, tab("red"), tab("blue")))

gg <- ggplot(toplot, aes(month, pct, color=colfill)) + 
  geom_point() + 
  scale_color_identity() +
  scale_y_continuous("Percent of published CVEs", label=label_percent(1), limits=c(0,1),
                     breaks=seq(0,1,0.2), 
                     expand=expansion(mult=c(0,0.01))) +
  scale_x_date("CVE Published (monthly)", date_breaks = "1 year", date_labels = "%Y") +
  labs(title = paste("Percent of Published CVEs with value in Vendor, Product and Version (all CNAs)")) +
  theme(plot.title = element_text(family=mainfont, face="italic", size=11))
gg
# savepic(gg, here::here("figs", "cna_affected", "monpct.prod_vend_version1"), 
#         height = 3.5, width = 7, open = FALSE, caption=TRUE, dpi=300)
```


## Which CNAs are published more complete VPV values? 

This looks at the percent of CVEs with a complete VPV record from each CNA and compares against the total number of CVEs from that CNA. 

Take note just how many CNAs are across the bottom (or the lack of CNAs at the bottom). This indicates that almost every CNA has been able to produce a complete VPV record. 

`mitre` as a CNA really sticks out here. 

```{r}
toplot <- one %>% 
  select(cve, 
         vendor = containers.cna.affected.vendor, 
         product=containers.cna.affected.product) %>% 
  left_join(versions, by="cve") %>%
  rename(version = containers.cna.affected.versions) %>% 
  mutate(across(.cols = c(-cve), function(x) ifelse(is.na(x), 0, 1))) |> 
  filter(product == 1, vendor == 1, version == 1) %>% 
  distinct(cve) %>% 
  mutate(has_affected = "yes") %>% 
  right_join(cvepub, by="cve") %>% 
  replace_na(list(has_affected = "no")) %>% 
  left_join(cvecna, by="cve") %>%
  count(has_affected, cna) %>% 
  spread(has_affected, n, fill = 0) %>% 
  mutate(total = no + yes) %>% 
  select(cna, x=yes, n=total) %>%
  mutate(pct = x / n) %>%
  mutate(colfill = ifelse(pct > 0, tab("red"), tab("blue")))

txtlab <- toplot %>% filter(x > 0 & n > 100)

gg <- ggplot(toplot, aes(n, pct, label=cna)) +
  geom_text_repel(data=txtlab, color="gray40", segment.color="gray80",
                  size=6/.pt, family=mainfont, 
                  point.padding = 0, box.padding=0.05) +
  geom_point() +
  scale_y_continuous("Percent of VPV CVEs (by CNA)", label=label_percent(1), limits=c(0,1),
                     breaks=seq(0,1,0.2), 
                     expand=expansion(mult=c(0,0.01))) +
  labs(title = paste("Percent of Published CVEs by CNA, with value in Vendor, Product and Version (VPV)")) +
  scale_x_log10("CVEs Published by CNA", label=mklab,
                breaks=10^seq(0,10), 
                minor_breaks=seq(1,9) * rep(10^seq(-5,10), each=9), 
                expand=expansion(mult=c(0.01, 0.01))) +

  theme(plot.title = element_text(family=mainfont, face="italic", size=11))
gg
# savepic(gg, here::here("figs", "cna_affected", "vpv_complete_by_cna"), 
#         height = 3.5, width = 7, open = FALSE, caption=FALSE, dpi=300)
```

## Timing of complete VPV records without CVEs published by MITRE 

```{r}
toplot <- one %>% 
  select(cve, 
         vendor = containers.cna.affected.vendor, 
         product=containers.cna.affected.product) %>% 
  left_join(versions, by="cve") %>%
  rename(version = containers.cna.affected.versions) %>% 
  mutate(across(.cols = c(-cve), function(x) ifelse(is.na(x), 0, 1))) |> 
  filter(product == 1 & vendor == 1 & version == 1) %>% 
  distinct(cve) %>% 
  mutate(has_affected = "yes") %>% 
  right_join(cvepub, by="cve") %>% 
  replace_na(list(has_affected = "no")) %>% 
  mutate(month = floor_date(published, unit="month")) %>% 
  left_join(cvecna, by="cve") %>% 
  filter(cna != "mitre") %>%
  count(has_affected, month) %>% 
  spread(has_affected, n, fill = 0) %>% 
  mutate(total = no + yes) %>% 
  # select(cna, x=yes, n=total) %>% 
  mutate(pct = yes / total) %>% 
  mutate(colfill = ifelse(pct > 0, tab("red"), tab("blue")))

gg <- ggplot(toplot, aes(month, pct, color=colfill)) + 
  geom_point() + 
  scale_color_identity() +
  scale_y_continuous("Percent of published CVEs ", label=label_percent(1), limits=c(0,1),
                     breaks=seq(0,1,0.2), 
                     expand=expansion(mult=c(0,0.01))) +
  scale_x_date("CVE Published (monthly)", date_breaks = "1 year", date_labels = "%Y") +
  labs(title = paste("Percent of Published CVEs (excluding all MITRE CVEs) with\nvalue in Vendor, Product and Version (all CNAs)")) +
  theme(plot.title = element_text(family=mainfont, face="italic", size=11))

gg
```


# collection URL

```{r}
curfield <- "containers.cna.affected.collectionURL"
one <- affdata %>% 
  mutate(across(where(is.character), function(x) gsub("^n/a$", NA_character_, x)))

url_pub <- one %>% 
  select(cve, affected.collectionURL = containers.cna.affected.collectionURL) %>% 
  drop_na() %>% 
  distinct() %>% 
  # count(affected.collectionURL, sort=TRUE)
  left_join(cvepub, by="cve") %>% 
  mutate(month = floor_date(published, unit="month")) %>% 
  count(month, name="x") %>% 
  complete(month = seq(min(month), max(month), by="1 month")) %>% 
  replace_na(list(x=0)) %>% 
  left_join(cvemonth, by="month") %>% 
  mutate(pct = x/n) %>% 
  mutate(colfill = ifelse(pct > 0, tab("red"), tab("blue")))

gg <- ggplot(url_pub, aes(month, pct, color=colfill)) + 
  geom_point() + 
  scale_color_identity() +
  scale_y_continuous("Percent of published CVEs", label=label_percent(1), expand=expansion(mult=c(0,0.01))) +
  scale_x_date("CVE Published (monthly)", date_breaks = "1 year", date_labels = "%Y") +
  labs(title = paste("Percent of Published CVEs with values in", curfield)) +
  theme(plot.title = element_text(family=mainfont, face="italic", size=11))
gg
```



```{r}
toplot <- one %>% 
  select(cve, affected.collectionURL = containers.cna.affected.collectionURL) %>% 
  drop_na() %>% 
  distinct() %>% 
  left_join(cvecna, by="cve") %>% 
  distinct(cve, cna) %>% 
  count(cna, name="x") %>% 
  full_join(cnacount, by="cna") %>% 
  replace_na(list(x=0)) %>% 
  mutate(pct = x/n) %>% 
  mutate(colfill = ifelse(pct > 0, tab("red"), tab("blue")))

gg <- ggplot(toplot, aes(n, pct, label=cna)) + 
  geom_text_repel(data=toplot %>% filter(x > 0, pct >= 0.03), color=muted(tab("red")),
                  size=6/.pt, family=mainfont, segment.color="gray80",
                  point.padding = 0, box.padding=0.05) +
  geom_text_repel(data=toplot %>% filter(x > 0, pct < 0.03), vjust=1, color=muted(tab("red")),
                  nudge_y = 0.03,
                  size=6/.pt, family=mainfont, segment.color="gray80",
                  point.padding = 0, box.padding=0.05) +
  geom_text_repel(data=toplot %>% filter(x == 0, n > 1000), vjust="top", direction="x",
                  angle=90, hjust="right",
                  nudge_y = -0.02, size=6/.pt, family=mainfont, segment.color="gray85",
                  point.padding = 0, label.padding=0, box.padding=0.025, color="gray40") +
  geom_point(aes(color=colfill)) +
  scale_color_identity() +
  scale_x_log10("CVEs Published by CNA", label=mklab,
                minor_breaks=seq(1,9) * rep(10^seq(-5,10), each=9), 
                expand=expansion(mult=c(0.01, 0.01))) +
  scale_y_continuous("Percent of published CVES with field", label=label_percent(1),
                     expand=expansion(mult=c(0.25, 0.01))) +
  labs(title = paste("Percent of Published CVEs by CNAs with values:", curfield)) +
  theme(panel.grid = element_line(color="gray95"),
        plot.title = element_text(family=mainfont, face="italic", size=11))
  # geom_text_repel(size=6/.pt, family=mainfont, segment.color="gray80",
  #                 point.padding = 0, box.padding=0.05) +
  # geom_point() +
  # scale_x_log10("Total Published CVEs by CNA", label=mklab) +
  # scale_y_continuous("Percent of published CVES with field", label=label_percent(1))

gg

```



```{r}
newcna <- cvecna %>% left_join(cvepub, by="cve") %>% 
  filter(published >= as.Date("2020-01-01")) %>% 
  count(cna)
toplot <- one %>% 
  select(cve, affected.collectionURL = containers.cna.affected.collectionURL) %>% 
  drop_na() %>% 
  distinct() %>% 
  left_join(cvepub, by="cve") %>% 
  filter(published >= as.Date("2020-01-01")) %>% 
  left_join(cvecna, by="cve") %>% 
  distinct(cve, cna) %>% 
  count(cna, name="x") %>% 
  full_join(newcna, by="cna") %>% 
  replace_na(list(x=0)) %>% 
  mutate(pct = x/n) %>% 
  mutate(colfill = ifelse(pct > 0, tab("red"), tab("blue")))

gg <- ggplot(toplot, aes(n, pct, label=cna)) + 
  geom_text_repel(data=toplot %>% filter(x > 0, pct >= 0.03), color=muted(tab("red")),
                  size=6/.pt, family=mainfont, segment.color="gray80",
                  point.padding = 0, box.padding=0.05) +
  geom_text_repel(data=toplot %>% filter(x > 0, pct < 0.03), vjust=1, color=muted(tab("red")),
                  nudge_y = 0.03,
                  size=6/.pt, family=mainfont, segment.color="gray80",
                  point.padding = 0, box.padding=0.05) +
  geom_text_repel(data=toplot %>% filter(x == 0, n > 1000), vjust="top", direction="x",
                  angle=90, hjust="right",
                  nudge_y = -0.02, size=6/.pt, family=mainfont, segment.color="gray85",
                  point.padding = 0, label.padding=0, box.padding=0.025, color="gray40") +
  geom_point(aes(color=colfill)) +
  scale_color_identity() +
  scale_x_log10("CVEs Published since 2020, by CNA", label=mklab,
                minor_breaks=seq(1,9) * rep(10^seq(-5,10), each=9), 
                expand=expansion(mult=c(0.01, 0.01))) +
  scale_y_continuous("Percent of published CVES with field", label=label_percent(1),
                     expand=expansion(mult=c(0.25, 0.01))) +
  labs(title = paste("Percent of Published CVEs by CNAs with values:", curfield)) +
  theme(panel.grid = element_line(color="gray95"),
        plot.title = element_text(family=mainfont, face="italic", size=11))

gg

```

```{r}
newcna <- cvecna %>% left_join(cvepub, by="cve") %>% 
  filter(published >= as.Date("2020-01-01")) %>% 
  count(cna)
toplot <- one %>% 
  select(cve, affected.collectionURL = containers.cna.affected.collectionURL) %>% 
  drop_na() %>% 
  distinct() %>% 
  left_join(cvecna, by="cve") %>%
  summarize(.by=cna, x=n_distinct(affected.collectionURL), n=n()) %>%
  mutate(pct = x/n) %>% 
  mutate(colfill = ifelse(pct > 0, tab("red"), tab("blue")))

newlab <- one %>% 
  select(cve, affected.collectionURL = containers.cna.affected.collectionURL) %>% 
  drop_na() %>% 
  distinct() %>% 
  left_join(cvecna, by="cve") %>%
  count(cna, url=affected.collectionURL, sort=TRUE) %>% 
  filter(.by = cna, row_number() == 1) %>% 
  filter(n > 10) %>% 
  select(-n) %>% 
  inner_join(toplot, by="cna")

gg <- ggplot(toplot, aes(n, pct, label=cna)) +
  geom_text_repel(color=muted(tab("red")),
                  size=6/.pt, family=mainfont, segment.color="gray80",
                  point.padding = 0, box.padding=0.05) +
  geom_text_repel(data=newlab, aes(label=url), color="gray50", angle=80, hjust="left",
                  size=5/.pt, family=mainfont, segment.color=NA, nudge_y = 0.05,
                  point.padding = 0, box.padding=0.015) +
  geom_point(aes(color=colfill)) +
  scale_color_identity() +
  scale_x_log10("CVEs Published by CNA", label=mklab,
                minor_breaks=seq(1,9) * rep(10^seq(-5,10), each=9), 
                expand=expansion(mult=c(0.01, 0.03))) +
  scale_y_continuous("Percent of values that are unique", label=label_percent(1),
                     expand=expansion(mult=c(0.05, 0.01)), breaks=seq(0,1,0.2)) +
  labs(title = paste("Percent of unique values:", curfield)) +
  theme(panel.grid = element_line(color="gray95"),
        plot.title = element_text(family=mainfont, face="italic", size=11))
gg
```


## affected.cpes

```{r}
curfield <- "containers.cna.affected.cpes"

url_pub <- one %>% select(cve, cpe = containers.cna.affected.cpes) %>% 
  drop_na() %>% 
  distinct(cve) %>% 
  # count(affected.collectionURL, sort=TRUE)
  left_join(cvepub, by="cve") %>% 
  mutate(month = floor_date(published, unit="month")) %>% 
  count(month, name="x") %>% 
  complete(month = seq(min(month), max(month), by="1 month")) %>% 
  replace_na(list(x=0)) %>% 
  left_join(cvemonth, by="month") %>% 
  mutate(pct = x/n) %>% 
  mutate(colfill = ifelse(pct > 0, tab("red"), tab("blue")))

gg <- ggplot(url_pub, aes(month, pct, color=colfill)) + 
  geom_point() + 
  scale_color_identity() +
  scale_y_continuous("Percent of published CVEs", label=label_percent(1), expand=expansion(mult=c(0,0.01))) +
  scale_x_date("CVE Published (monthly)", date_breaks = "1 year", date_labels = "%Y") +
  labs(title = paste("Percent of Published CVEs with values in", curfield)) +
  theme(plot.title = element_text(family=mainfont, face="italic", size=11))

gg
```


```{r}
toplot <- one %>% 
  select(cve, cpe = containers.cna.affected.cpes) %>% 
  drop_na() %>% 
  distinct() %>% 
  left_join(cvecna, by="cve") %>% 
  distinct(cve, cna) %>% 
  count(cna, name="x") %>% 
  full_join(cnacount, by="cna") %>% 
  replace_na(list(x=0)) %>% 
  mutate(pct = x/n) %>% 
  mutate(colfill = ifelse(pct > 0, tab("red"), tab("blue")))

gg <- ggplot(toplot, aes(n, pct, label=cna)) + 
  geom_text_repel(data=toplot %>% filter(x > 0, pct >= 0.03), color=muted(tab("red")),
                  size=6/.pt, family=mainfont, segment.color="gray80",
                  point.padding = 0, box.padding=0.05) +
  geom_text_repel(data=toplot %>% filter(x > 0, pct < 0.03), vjust=1, color=muted(tab("red")),
                  nudge_y = 0.03,
                  size=6/.pt, family=mainfont, segment.color="gray80",
                  point.padding = 0, box.padding=0.05) +
  geom_text_repel(data=toplot %>% filter(x == 0, n > 1000), vjust="top", direction="x",
                  angle=90, hjust="right",
                  nudge_y = -0.02, size=6/.pt, family=mainfont, segment.color="gray85",
                  point.padding = 0, label.padding=0, box.padding=0.025, color="gray40") +
  geom_point(aes(color=colfill)) +
  scale_color_identity() +
  scale_x_log10("CVEs Published by CNA", label=mklab,
                minor_breaks=seq(1,9) * rep(10^seq(-5,10), each=9), 
                expand=expansion(mult=c(0.01, 0.01))) +
  scale_y_continuous("Percent of published CVES with field", label=label_percent(1),
                     expand=expansion(mult=c(0.25, 0.01))) +
  labs(title = paste("Percent of Published CVEs by CNAs with values:", curfield)) +
  theme(panel.grid = element_line(color="gray95"),
        plot.title = element_text(family=mainfont, face="italic", size=11))

gg

```


```{r}
newcna <- cvecna %>% left_join(cvepub, by="cve") %>% 
  filter(published >= as.Date("2021-01-01")) %>% 
  count(cna)
toplot <- one %>% 
  select(cve, cpe = containers.cna.affected.cpes) %>% 
  drop_na() %>% 
  distinct() %>% 
  left_join(cvepub, by="cve") %>% 
  filter(published >= as.Date("2021-01-01")) %>% 
  left_join(cvecna, by="cve") %>% 
  distinct(cve, cna) %>% 
  count(cna, name="x") %>% 
  full_join(newcna, by="cna") %>% 
  replace_na(list(x=0)) %>% 
  mutate(pct = x/n) %>% 
  mutate(colfill = ifelse(pct > 0, tab("red"), tab("blue")))

gg <- ggplot(toplot, aes(n, pct, label=cna)) + 
  geom_text_repel(data=toplot %>% filter(x > 0, pct >= 0.03), color=muted(tab("red")),
                  size=6/.pt, family=mainfont, segment.color="gray80",
                  point.padding = 0, box.padding=0.05) +
  geom_text_repel(data=toplot %>% filter(x > 0, pct < 0.03), vjust=1, color=muted(tab("red")),
                  nudge_y = 0.03,
                  size=6/.pt, family=mainfont, segment.color="gray80",
                  point.padding = 0, box.padding=0.05) +
  geom_text_repel(data=toplot %>% filter(x == 0, n > 1000), vjust="top", direction="x",
                  angle=90, hjust="right",
                  nudge_y = -0.02, size=6/.pt, family=mainfont, segment.color="gray85",
                  point.padding = 0, label.padding=0, box.padding=0.025, color="gray40") +
  geom_point(aes(color=colfill)) +
  scale_color_identity() +
  scale_x_log10("CVEs Published since 2021, by CNA", label=mklab,
                minor_breaks=seq(1,9) * rep(10^seq(-5,10), each=9), 
                expand=expansion(mult=c(0.01, 0.01))) +
  scale_y_continuous("Percent of published CVES with field", label=label_percent(1),
                     expand=expansion(mult=c(0.25, 0.01)), breaks=seq(0,1,0.2)) +
  labs(title = paste("Percent of Published CVEs in 2021+ by CNAs:", curfield)) +
  theme(panel.grid = element_line(color="gray95"),
        plot.title = element_text(family=mainfont, face="italic", size=11))

gg
```

